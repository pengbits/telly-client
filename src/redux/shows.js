import {createAction} from 'redux-actions'
import fetchJSON from '../utils/fetchJSON'

//
// action constants 
// these can't be namespaced behind telly/shows/FETCH_SHOWS, because some are 
// generated by redux-promise-middleware and won't match that format
// ----------------------------------------------------------------------------
const FETCH_SHOWS                = 'FETCH_SHOWS';
const FETCH_SHOWS_LOADING        = 'FETCH_SHOWS_LOADING';
const FETCH_SHOWS_SUCCESS        = 'FETCH_SHOWS_SUCCESS';
const FETCH_SHOWS_ERROR          = 'FETCH_SHOWS_ERROR';

const FETCH_SHOW_DETAILS         = 'FETCH_SHOW_DETAILS';
const FETCH_SHOW_DETAILS_LOADING = 'FETCH_SHOW_DETAILS_LOADING';
const FETCH_SHOW_DETAILS_SUCCESS = 'FETCH_SHOW_DETAILS_SUCCESS'; 
const FETCH_SHOW_DETAILS_ERROR   = 'FETCH_SHOW_DETAILS_ERROR';

const CREATE_SHOW                = 'CREATE_SHOW';  // this is more of a getForm kind of state
const CREATE_SHOW_LOADING        = 'CREATE_SHOW_LOADING';
const CREATE_SHOW_SUCCESS        = 'CREATE_SHOW_SUCCESS';
const CREATE_SHOW_ERROR          = 'CREATE_SHOW_ERROR';

const UPDATE_SHOW_LOADING        = 'UPDATE_SHOW_LOADING';
const UPDATE_SHOW_SUCCESS        = 'UPDATE_SHOW_SUCCESS';
const UPDATE_SHOW_ERROR          = 'UPDATE_SHOW_ERROR';

const DELETE_SHOW_LOADING        = 'DELETE_SHOW_LOADING';
const DELETE_SHOW_SUCCESS        = 'DELETE_SHOW_SUCCESS';
const DELETE_SHOW_ERROR          = 'DELETE_SHOW_ERROR';

//
// reducers
// ----------------------------------------------------------------------------
export const shows = (state = {list: [], loading:false}, action) => {

  switch (action.type){
    case FETCH_SHOWS_LOADING:
      return {
        list: [],
        loading: true
      }
    case FETCH_SHOWS_SUCCESS:
      return {
        list: action.payload.shows,
        loading: false
      }
    case FETCH_SHOWS_ERROR:
      return {
        list: [],
        loading: false,
        error: action.error
      }
    case DELETE_SHOW_SUCCESS:
      return {
        list: state.list.filter(show => {
          return show._id !== action.payload.show._id
        }),
        loading: false
      }  
    default:
      return state
  }
}

export const show = (state={showDetails:{}, loading:false}, action={}) => {
  switch (action.type){
    case FETCH_SHOW_DETAILS_LOADING:
      return {
        loading: true
      }
    case FETCH_SHOW_DETAILS_SUCCESS: 
      return {
        loading: false,
        showDetails: action.payload.show
      }
    case CREATE_SHOW:
      return {
        loading: false
      }
    case CREATE_SHOW_SUCCESS:
      return {
        loading: false,
        message: 'Your changes have been saved'
      }
    case UPDATE_SHOW_SUCCESS:
      return {
        loading: false,
        message: 'Your changes have been saved',
        showDetails: action.payload.show
      }
    case DELETE_SHOW_SUCCESS:
      return {
        loading: false,
        message: 'The requested show has been deleted'
      }
    case FETCH_SHOW_DETAILS_ERROR:
    case CREATE_SHOW_ERROR:
    case UPDATE_SHOW_ERROR:
      return {
        loading: false,
        error: action.error
      }
    default:
      return state
  }
}


//
// action creators
// ----------------------------------------------------------------------------
export const getShows = () => {
  return (dispatch, getState) => {
    dispatch(
      createAction('FETCH_SHOWS')(
        fetchJSON(`/shows`)
          .then((xhr => xhr), (e => {throw e}))
      )
    )
    .catch(e => {
      console.log(e)
    })
  }
}

export const getShowDetails = (id) => {
  return (dispatch, getState) => {
    dispatch({
      type: 'FETCH_SHOW_DETAILS',
      payload: fetchJSON(`/shows/${id}`)
        .then((xhr) => {
          return xhr
        }, (error) => {
          throw error
        })
    })
  }
}

export const getShowForm = createAction('CREATE_SHOW')

export const createShow = (show) => {
  return (dispatch, getState) => {
    return dispatch({
      type: 'CREATE_SHOW',
      payload: fetchJSON(`/shows/`, {
        'method' : 'POST',
        'body' : show
      })
      .then(xhr => xhr)
    })
  }
}

export const updateShow = (show) => {
  return (dispatch, getState) => {
    return dispatch({
      type: 'UPDATE_SHOW',
      payload: fetchJSON(`/shows/${show._id}`, {
        'method' : 'PUT',
        'body' : show
      })
      .then(xhr => xhr)
    })
  }
}

export const deleteShow = (show) => {
  return (dispatch, getState) => {
    return dispatch({
      type: 'DELETE_SHOW',
      payload: fetchJSON(`/shows/${show._id}`, {
        'method' : 'DELETE',
      })
      .then(xhr => xhr)
    })
  }
}