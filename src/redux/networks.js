import {createAction,createActions} from 'redux-actions'
import fetchJSON from '../utils/fetchJSON'

//
// action constants 
// these can't be namespaced behind telly/networks/FETCH_NETWORKS, because some are 
// generated by redux-promise-middleware and won't match that format
// ----------------------------------------------------------------------------
const FETCH_NETWORKS = 'FETCH_NETWORKS';
const FETCH_NETWORK_DETAILS  = 'FETCH_NETWORK_DETAILS';
const CREATE_NETWORK = 'CREATE_NETWORK';
const UPDATE_NETWORK = 'UPDATE_NETWORK';
const DELETE_NETWORK = 'DELETE_NETWORK';

//
// reducers
// ----------------------------------------------------------------------------
export const networks = (state = {list: [], loading:false}, action) => {

  switch (action.type){
    case FETCH_NETWORKS_LOADING:
      return {
        list: [],
        loading: true
      }
    case FETCH_NETWORKS_SUCCESS:
      return {
        list: action.payload.networks,
        loading: false
      }
    case FETCH_NETWORKS_ERROR:
      return {
        list: [],
        loading: false,
        error: action.error
      }
    case DELETE_NETWORK_SUCCESS:
      return {
        list: state.list.filter(network => {
          return network._id !== action.payload.network._id
        }),
        loading: false
      }  
    default:
      return state
  }
}

export const network = (state={networkDetails:{}, loading:false}, action={}) => {
  switch (action.type){
    case FETCH_NETWORK_DETAILS_LOADING:
      return {
        loading: true
      }
    case FETCH_NETWORK_DETAILS_SUCCESS: 
      return {
        loading: false,
        networkDetails: action.payload.network
      }
    case CREATE_NETWORK:
      return {
        loading: false
      }
      
    case CREATE_NETWORK_SUCCESS:
      return {
        loading: false,
        message: 'Your changes have been saved'
      }
    case UPDATE_NETWORK_SUCCESS:
      return {
        loading: false,
        message: 'Your changes have been saved',
        networkDetails: action.payload.network
      }
    case DELETE_NETWORK_SUCCESS:
      return {
        loading: false,
        message: 'The requested network has been deleted'
      }
      
    case FETCH_NETWORK_DETAILS_ERROR:
    case CREATE_NETWORK_ERROR:
    case UPDATE_NETWORK_ERROR:
      return {
        loading: false,
        error: action.error
      }
    default:
      return state
  }
}
//
// action creators
// ----------------------------------------------------------------------------
export const getNetworks = () => {
  return (dispatch, getState) => {
    dispatch(
      createAction(FETCH_NETWORKS)(
        fetchJSON(`/networks`)
          .then((xhr => xhr), (e => {throw e}))
        )   
    )
  }
}

export const getNetworkDetails = (id) => {
  return (dispatch, getState) => {
    dispatch(
      createAction(FETCH_NETWORK_DETAILS)(
        fetchJSON(`/networks/${id}`)
          .then((xhr => xhr), (e => {throw e}))
        )   
    )
  }
}


